!(function(factory) {
  "function" == typeof define && define.amd
    ? define(["jquery"], factory)
    : factory(jQuery);
})(function(jQuery) {
  "use strict";
  var $ = jQuery;
  $ = jQuery;
  if (void 0 === jQuery) throw new Error("Metro 4 requires jQuery!");
  if ("MutationObserver" in window == !1)
    throw new Error("Metro 4 requires MutationObserver!");
  var meta_init = $("meta[name='metro4:init']").attr("content"),
    meta_locale = $("meta[name='metro4:locale']").attr("content"),
    meta_week_start = $("meta[name='metro4:week_start']").attr("content"),
    meta_date_format = $("meta[name='metro4:date_format']").attr("content"),
    meta_date_format_input = $("meta[name='metro4:date_format_input']").attr(
      "content"
    ),
    meta_animation_duration = $("meta[name='metro4:animation_duration']").attr(
      "content"
    ),
    meta_callback_timeout = $("meta[name='metro4:callback_timeout']").attr(
      "content"
    ),
    meta_timeout = $("meta[name='metro4:timeout']").attr("content"),
    meta_scroll_multiple = $("meta[name='metro4:scroll_multiple']").attr(
      "content"
    ),
    meta_cloak = $("meta[name='metro4:cloak']").attr("content"),
    meta_cloak_duration = $("meta[name='metro4:cloak_duration']").attr(
      "content"
    ),
    meta_about = $("meta[name='metro4:about']").attr("content");
  void 0 === window.METRO_SHOW_ABOUT &&
    (window.METRO_SHOW_ABOUT = void 0 === meta_about || JSON.parse(meta_about));
  var meta_compile = $("meta[name='metro4:compile']").attr("content");
  void 0 === window.METRO_SHOW_COMPILE_TIME &&
    (window.METRO_SHOW_COMPILE_TIME =
      void 0 === meta_compile || JSON.parse(meta_compile)),
    void 0 === window.METRO_INIT &&
      (window.METRO_INIT = void 0 === meta_init || JSON.parse(meta_init)),
    void 0 === window.METRO_DEBUG && (window.METRO_DEBUG = !0),
    void 0 === window.METRO_WEEK_START &&
      (window.METRO_WEEK_START =
        void 0 !== meta_week_start ? parseInt(meta_week_start) : 0),
    void 0 === window.METRO_DATE_FORMAT &&
      (window.METRO_DATE_FORMAT =
        void 0 !== meta_date_format ? meta_date_format : "%Y-%m-%d"),
    void 0 === window.METRO_DATE_FORMAT_INPUT &&
      (window.METRO_DATE_FORMAT_INPUT =
        void 0 !== meta_date_format_input
          ? meta_date_format_input
          : "%Y-%m-%d"),
    void 0 === window.METRO_LOCALE &&
      (window.METRO_LOCALE = void 0 !== meta_locale ? meta_locale : "en-US"),
    void 0 === window.METRO_ANIMATION_DURATION &&
      (window.METRO_ANIMATION_DURATION =
        void 0 !== meta_animation_duration
          ? parseInt(meta_animation_duration)
          : 300),
    void 0 === window.METRO_CALLBACK_TIMEOUT &&
      (window.METRO_CALLBACK_TIMEOUT =
        void 0 !== meta_callback_timeout
          ? parseInt(meta_callback_timeout)
          : 500),
    void 0 === window.METRO_TIMEOUT &&
      (window.METRO_TIMEOUT =
        void 0 !== meta_timeout ? parseInt(meta_timeout) : 2e3),
    void 0 === window.METRO_SCROLL_MULTIPLE &&
      (window.METRO_SCROLL_MULTIPLE =
        void 0 !== meta_scroll_multiple ? parseInt(meta_scroll_multiple) : 20),
    void 0 === window.METRO_CLOAK_REMOVE &&
      (window.METRO_CLOAK_REMOVE =
        void 0 !== meta_cloak ? ("" + meta_cloak).toLowerCase() : "fade"),
    void 0 === window.METRO_CLOAK_DURATION &&
      (window.METRO_CLOAK_DURATION =
        void 0 !== meta_cloak_duration ? parseInt(meta_cloak_duration) : 500),
    void 0 === window.METRO_HOTKEYS_FILTER_CONTENT_EDITABLE &&
      (window.METRO_HOTKEYS_FILTER_CONTENT_EDITABLE = !0),
    void 0 === window.METRO_HOTKEYS_FILTER_INPUT_ACCEPTING_ELEMENTS &&
      (window.METRO_HOTKEYS_FILTER_INPUT_ACCEPTING_ELEMENTS = !0),
    void 0 === window.METRO_HOTKEYS_FILTER_TEXT_INPUTS &&
      (window.METRO_HOTKEYS_FILTER_TEXT_INPUTS = !0),
    void 0 === window.METRO_HOTKEYS_BUBBLE_UP &&
      (window.METRO_HOTKEYS_BUBBLE_UP = !1),
    void 0 === window.METRO_THROWS && (window.METRO_THROWS = !0),
    (window.METRO_MEDIA = []),
    "function" != typeof Object.create &&
      (Object.create = function(o) {
        function F() {}
        return (F.prototype = o), new F();
      }),
    "function" != typeof Object.values &&
      (Object.values = function(obj) {
        return Object.keys(obj).map(function(e) {
          return obj[e];
        });
      }),
    "function" != typeof window.setImmediate &&
      (window.setImmediate = function(fn) {
        return setTimeout(fn, 0);
      });
  var isTouch =
      "ontouchstart" in window ||
      0 < navigator.MaxTouchPoints ||
      0 < navigator.msMaxTouchPoints,
    Metro = {
      version: "4.2.43",
      compileTime: "@@compile",
      buildNumber: "725",
      isTouchable: isTouch,
      fullScreenEnabled: document.fullscreenEnabled,
      sheet: null,
      controlsPosition: { INSIDE: "inside", OUTSIDE: "outside" },
      groupMode: { ONE: "one", MULTI: "multi" },
      aspectRatio: { HD: "hd", SD: "sd", CINEMA: "cinema" },
      fullScreenMode: { WINDOW: "window", DESKTOP: "desktop" },
      position: {
        TOP: "top",
        BOTTOM: "bottom",
        LEFT: "left",
        RIGHT: "right",
        TOP_RIGHT: "top-right",
        TOP_LEFT: "top-left",
        BOTTOM_LEFT: "bottom-left",
        BOTTOM_RIGHT: "bottom-right",
        LEFT_BOTTOM: "left-bottom",
        LEFT_TOP: "left-top",
        RIGHT_TOP: "right-top",
        RIGHT_BOTTOM: "right-bottom"
      },
      popoverEvents: { CLICK: "click", HOVER: "hover", FOCUS: "focus" },
      stepperView: { SQUARE: "square", CYCLE: "cycle", DIAMOND: "diamond" },
      listView: {
        LIST: "list",
        CONTENT: "content",
        ICONS: "icons",
        ICONS_MEDIUM: "icons-medium",
        ICONS_LARGE: "icons-large",
        TILES: "tiles",
        TABLE: "table"
      },
      events: {
        click: "click.metro",
        start: isTouch ? "touchstart.metro" : "mousedown.metro",
        stop: isTouch ? "touchend.metro" : "mouseup.metro",
        move: isTouch ? "touchmove.metro" : "mousemove.metro",
        enter: isTouch ? "touchstart.metro" : "mouseenter.metro",
        startAll: "mousedown.metro touchstart.metro",
        stopAll: "mouseup.metro touchend.metro",
        moveAll: "mousemove.metro touchmove.metro",
        leave: "mouseleave.metro",
        focus: "focus.metro",
        blur: "blur.metro",
        resize: "resize.metro",
        keyup: "keyup.metro",
        keydown: "keydown.metro",
        keypress: "keypress.metro",
        dblclick: "dblclick.metro",
        input: "input.metro",
        change: "change.metro",
        cut: "cut.metro",
        paste: "paste.metro",
        scroll: "scroll.metro",
        mousewheel: "mousewheel.metro",
        inputchange:
          "change.metro input.metro propertychange.metro cut.metro paste.metro copy.metro",
        dragstart: "dragstart.metro",
        dragend: "dragend.metro",
        dragenter: "dragenter.metro",
        dragover: "dragover.metro",
        dragleave: "dragleave.metro",
        drop: "drop.metro",
        drag: "drag.metro"
      },
      keyCode: {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        BREAK: 19,
        CAPS: 20,
        ESCAPE: 27,
        SPACE: 32,
        PAGEUP: 33,
        PAGEDOWN: 34,
        END: 35,
        HOME: 36,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        COMMA: 188
      },
      media_queries: {
        FS: "(min-width: 0px)",
        XS: "(min-width: 360px)",
        SM: "(min-width: 576px)",
        MD: "(min-width: 768px)",
        LG: "(min-width: 992px)",
        XL: "(min-width: 1200px)",
        XXL: "(min-width: 1452px)"
      },
      media_sizes: {
        FS: 0,
        XS: 360,
        SM: 576,
        LD: 640,
        MD: 768,
        LG: 992,
        XL: 1200,
        XXL: 1452
      },
      media_mode: {
        FS: "fs",
        XS: "xs",
        SM: "sm",
        MD: "md",
        LG: "lg",
        XL: "xl",
        XXL: "xxl"
      },
      media_modes: ["fs", "xs", "sm", "md", "lg", "xl", "xxl"],
      actions: { REMOVE: 1, HIDE: 2 },
      hotkeys: {},
      about: function() {
        console.log(
          "Metro 4 - v" + Metro.version + ". " + Metro.showCompileTime()
        );
      },
      showCompileTime: function() {
        return "Built at: " + Metro.compileTime;
      },
      aboutDlg: function() {
        alert("Metro 4 - v" + Metro.version + ". " + Metro.showCompileTime());
      },
      ver: function() {
        return Metro.version;
      },
      build: function() {
        return Metro.build;
      },
      compile: function() {
        return Metro.compileTime;
      },
      observe: function() {
        new MutationObserver(function(mutations) {
          mutations.map(function(mutation) {
            if (
              "attributes" === mutation.type &&
              "data-role" !== mutation.attributeName
            )
              if ("data-hotkey" === mutation.attributeName)
                Metro.initHotkeys([mutation.target], !0);
              else {
                var element = $(mutation.target),
                  mc = element.data("metroComponent");
                void 0 !== mc &&
                  $.each(mc, function() {
                    var plug = element.data(this);
                    plug && plug.changeAttribute(mutation.attributeName);
                  });
              }
            else if (
              "childList" === mutation.type &&
              0 < mutation.addedNodes.length
            ) {
              var i,
                $node,
                node,
                widgets = [],
                nodes = mutation.addedNodes;
              if (nodes.length) {
                for (i = 0; i < nodes.length; i++)
                  (node = nodes[i]),
                    void 0 !== ($node = $(node)).attr("data-role") &&
                      widgets.push(node),
                    $.each($node.find("[data-role]"), function() {
                      -1 === widgets.indexOf(this) && widgets.push(this);
                    });
                widgets.length && Metro.initWidgets(widgets, "observe");
              }
            }
          });
        }).observe($("html")[0], {
          childList: !0,
          attributes: !0,
          subtree: !0
        });
      },
      init: function() {
        var widgets = $("[data-role]"),
          hotkeys = $("[data-hotkey]"),
          html = $("html");
        return (
          !0 === isTouch
            ? html.addClass("metro-touch-device")
            : html.addClass("metro-no-touch-device"),
          (Metro.sheet = Utils.newCssSheet()),
          (window.METRO_MEDIA = []),
          $.each(Metro.media_queries, function(key, query) {
            Utils.media(query) && METRO_MEDIA.push(Metro.media_mode[key]);
          }),
          Metro.observe(),
          Metro.initHotkeys(hotkeys),
          Metro.initWidgets(widgets, "init"),
          METRO_SHOW_ABOUT && Metro.about(!0),
          "fade" !== METRO_CLOAK_REMOVE
            ? $(".m4-cloak").removeClass("m4-cloak")
            : $(".m4-cloak").animate(
                { opacity: 1 },
                METRO_CLOAK_REMOVE,
                function() {
                  $(".m4-cloak").removeClass("m4-cloak");
                }
              ),
          Metro
        );
      },
      initHotkeys: function(hotkeys, redefine) {
        $.each(hotkeys, function() {
          var element = $(this),
            hotkey =
              !!element.attr("data-hotkey") &&
              element.attr("data-hotkey").toLowerCase(),
            fn =
              !!element.attr("data-hotkey-func") &&
              element.attr("data-hotkey-func");
          !1 !== hotkey &&
            (!0 !== element.data("hotKeyBonded") || Utils.bool(redefine)) &&
            ((Metro.hotkeys[hotkey] = [this, fn]),
            element.data("hotKeyBonded", !0));
        });
      },
      initWidgets: function(widgets, a) {
        $.each(widgets, function() {
          var $this = $(this);
          $this
            .data("role")
            .split(/\s*,\s*/)
            .map(function(func) {
              if (
                void 0 !== $.fn[func] &&
                void 0 === $this.attr("data-role-" + func)
              )
                try {
                  $.fn[func].call($this), $this.attr("data-role-" + func, !0);
                  var mc = $this.data("metroComponent");
                  void 0 === mc ? (mc = [func]) : mc.push(func),
                    $this.data("metroComponent", mc);
                } catch (e) {
                  throw (console.log(e.message + " in " + e.stack), e);
                }
            });
        });
      },
      plugin: function(name, object) {
        $.fn[name] = function(options) {
          return this.each(function() {
            $.data(this, name, Object.create(object).init(options, this));
          });
        };
      },
      destroyPlugin: function(element, name) {
        var p,
          mc,
          el = $(element);
        if (((p = el.data(name)), !Utils.isValue(p)))
          throw new Error(
            "Component can not be destroyed: the element is not a Metro 4 component."
          );
        if (!Utils.isFunc(p.destroy))
          throw new Error(
            "Component can not be destroyed: method destroy not found."
          );
        p.destroy(),
          (mc = el.data("metroComponent")),
          Utils.arrayDelete(mc, name),
          el.data("metroComponent", mc),
          $.removeData(el[0], name),
          el.removeAttr("data-role-" + name);
      },
      destroyPluginAll: function(element) {
        var el = $(element),
          mc = el.data("metroComponent");
        void 0 !== mc &&
          0 < mc.length &&
          $.each(mc, function() {
            Metro.destroyPlugin(el[0], this);
          });
      },
      initPlugin: function(element, name) {
        element = $(element);
        try {
          if (
            void 0 !== $.fn[name] &&
            void 0 === element.attr("data-role-" + name)
          ) {
            $.fn[name].call(element), element.attr("data-role-" + name, !0);
            var mc = element.data("metroComponent");
            void 0 === mc ? (mc = [name]) : mc.push(name),
              element.data("metroComponent", mc);
          }
        } catch (e) {
          console.log(e.message, e.stack);
        }
      },
      reinitPlugin: function(element, name) {
        this.destroyPlugin(element, name), this.initPlugin(element, name);
      },
      reinitPluginAll: function(element) {
        var mc = $(element).data("metroComponent");
        void 0 !== mc &&
          0 < mc.length &&
          $.each(mc, function() {
            Metro.reinitPlugin(element, this);
          });
      },
      noop: function() {},
      noop_true: function() {
        return !0;
      },
      noop_false: function() {
        return !1;
      },
      stop: function(e) {
        e.stopPropagation(), e.preventDefault();
      },
      requestFullScreen: function(element) {
        element.mozRequestFullScreen
          ? element.mozRequestFullScreen()
          : element.webkitRequestFullScreen
          ? element.webkitRequestFullScreen()
          : element.msRequestFullscreen
          ? element.msRequestFullscreen()
          : element.requestFullscreen();
      },
      exitFullScreen: function() {
        document.mozCancelFullScreen
          ? document.mozCancelFullScreen()
          : document.webkitCancelFullScreen
          ? document.webkitCancelFullScreen()
          : document.msExitFullscreen
          ? document.msExitFullscreen()
          : document.exitFullscreen();
      },
      inFullScreen: function() {
        return (
          void 0 !==
          (document.fullscreenElement ||
            document.webkitFullscreenElement ||
            document.mozFullScreenElement ||
            document.msFullscreenElement)
        );
      }
    };
  (window.Metro = Metro),
    $(window).on(Metro.events.resize, function() {
      (window.METRO_MEDIA = []),
        $.each(Metro.media_queries, function(key, query) {
          Utils.media(query) && METRO_MEDIA.push(Metro.media_mode[key]);
        });
    }),
    $.fn.extend({
      toggleAttr: function(a, v) {
        return this.each(function() {
          var el = $(this);
          void 0 !== v
            ? el.attr(a, v)
            : void 0 !== el.attr(a)
            ? el.removeAttr(a)
            : el.attr(a, "" + a);
        });
      },
      clearClasses: function() {
        return this.each(function() {
          this.className = "";
        });
      },
      fire: function(eventName, data) {
        return this.each(function() {
          var e = document.createEvent("Events");
          (e.detail = data),
            e.initEvent(eventName, !0, !1),
            this.dispatchEvent(e);
        });
      }
    }),
    (Array.prototype.shuffle = function() {
      for (
        var temporaryValue, randomIndex, currentIndex = this.length;
        0 !== currentIndex;

      )
        (randomIndex = Math.floor(Math.random() * currentIndex)),
          (temporaryValue = this[(currentIndex -= 1)]),
          (this[currentIndex] = this[randomIndex]),
          (this[randomIndex] = temporaryValue);
      return this;
    }),
    (Array.prototype.clone = function() {
      return this.slice(0);
    }),
    (Array.prototype.unique = function() {
      for (var a = this.concat(), i = 0; i < a.length; ++i)
        for (var j = i + 1; j < a.length; ++j)
          a[i] === a[j] && a.splice(j--, 1);
      return a;
    }),
    Array.from ||
      (Array.from = function(val) {
        var i,
          a = [];
        if (void 0 === val.length && "object" == typeof val)
          return Object.values(val);
        if (void 0 === val.length)
          throw new Error("Value can not be converted to array");
        for (i = 0; i < val.length; i++) a.push(val[i]);
        return a;
      }),
    "function" != typeof Array.contains &&
      (Array.prototype.contains = function(val, from) {
        return -1 < this.indexOf(val, from);
      }),
    (Number.prototype.format = function(n, x, s, c) {
      var re = "\\d(?=(\\d{" + (x || 3) + "})+" + (0 < n ? "\\D" : "$") + ")",
        num = this.toFixed(Math.max(0, ~~n));
      return (c ? num.replace(".", c) : num).replace(
        new RegExp(re, "g"),
        "$&" + (s || ",")
      );
    }),
    (String.prototype.capitalize = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
    }),
    (String.prototype.contains = function() {
      return !!~String.prototype.indexOf.apply(this, arguments);
    }),
    (String.prototype.toDate = function(format, locale) {
      var normalized,
        formatItems,
        dateItems,
        monthIndex,
        dayIndex,
        yearIndex,
        hourIndex,
        minutesIndex,
        secondsIndex,
        year,
        month,
        day,
        hour,
        minute,
        second,
        parsedMonth;
      locale = locale || "en-US";
      if (null == format || "" === format) return new Date(this);
      if (
        ((normalized = this.replace(/[\/,.:\s]/g, "-")),
        (formatItems = format
          .toLowerCase()
          .replace(/[^a-zA-Z0-9%]/g, "-")
          .split("-")),
        (dateItems = normalized.split("-")),
        "" === normalized.replace(/\-/g, "").trim())
      )
        return "Invalid Date";
      if (
        ((monthIndex =
          -1 < formatItems.indexOf("mm")
            ? formatItems.indexOf("mm")
            : formatItems.indexOf("%m")),
        (dayIndex =
          -1 < formatItems.indexOf("dd")
            ? formatItems.indexOf("dd")
            : formatItems.indexOf("%d")),
        (yearIndex =
          -1 < formatItems.indexOf("yyyy")
            ? formatItems.indexOf("yyyy")
            : -1 < formatItems.indexOf("yy")
            ? formatItems.indexOf("yy")
            : formatItems.indexOf("%y")),
        (hourIndex =
          -1 < formatItems.indexOf("hh")
            ? formatItems.indexOf("hh")
            : formatItems.indexOf("%h")),
        (minutesIndex =
          -1 < formatItems.indexOf("ii")
            ? formatItems.indexOf("ii")
            : -1 < formatItems.indexOf("mi")
            ? formatItems.indexOf("mi")
            : formatItems.indexOf("%i")),
        (secondsIndex =
          -1 < formatItems.indexOf("ss")
            ? formatItems.indexOf("ss")
            : formatItems.indexOf("%s")),
        !(-1 < monthIndex && "" !== dateItems[monthIndex]))
      )
        return "Invalid Date";
      if (isNaN(parseInt(dateItems[monthIndex]))) {
        if (
          ((dateItems[monthIndex] = (function(month) {
            var d, months, index, i;
            if (
              ((month = month.substr(0, 3)),
              void 0 !== locale &&
                "en-US" !== locale &&
                void 0 !== Locales &&
                void 0 !== Locales[locale] &&
                void 0 !== Locales[locale].calendar &&
                void 0 !== Locales[locale].calendar.months)
            ) {
              for (
                months = Locales[locale].calendar.months, i = 12;
                i < months.length;
                i++
              )
                if (months[i].toLowerCase() === month.toLowerCase()) {
                  index = i - 12;
                  break;
                }
              month = Locales["en-US"].calendar.months[index];
            }
            return (
              (d = Date.parse(month + " 1, 1972")),
              isNaN(d) ? -1 : new Date(d).getMonth() + 1
            );
          })(dateItems[monthIndex])),
          -1 === dateItems[monthIndex])
        )
          return "Invalid Date";
      } else if (
        (parsedMonth = parseInt(dateItems[monthIndex])) < 1 ||
        12 < parsedMonth
      )
        return "Invalid Date";
      return (
        (year =
          -1 < yearIndex && "" !== dateItems[yearIndex]
            ? dateItems[yearIndex]
            : null),
        (month =
          -1 < monthIndex && "" !== dateItems[monthIndex]
            ? dateItems[monthIndex]
            : null),
        (day =
          -1 < dayIndex && "" !== dateItems[dayIndex]
            ? dateItems[dayIndex]
            : null),
        (hour =
          -1 < hourIndex && "" !== dateItems[hourIndex]
            ? dateItems[hourIndex]
            : null),
        (minute =
          -1 < minutesIndex && "" !== dateItems[minutesIndex]
            ? dateItems[minutesIndex]
            : null),
        (second =
          -1 < secondsIndex && "" !== dateItems[secondsIndex]
            ? dateItems[secondsIndex]
            : null),
        new Date(year, month - 1, day, hour, minute, second)
      );
    }),
    (String.prototype.toArray = function(delimiter, type, format) {
      return (
        (type = type || "string"),
        (format = null != format && format),
        ("" + this).split((delimiter = delimiter || ",")).map(function(s) {
          var result;
          switch (type) {
            case "int":
            case "integer":
              result = parseInt(s);
              break;
            case "number":
            case "float":
              result = parseFloat(s);
              break;
            case "date":
              result = format ? s.toDate(format) : new Date(s);
              break;
            default:
              result = s.trim();
          }
          return result;
        })
      );
    }),
    (Date.prototype.getWeek = function(dowOffset) {
      var nday, newYear, day, daynum, weeknum;
      return (
        (dowOffset = Utils.isValue(dowOffset)
          ? "number" == typeof dowOffset
            ? parseInt(dowOffset)
            : 0
          : METRO_WEEK_START),
        (day =
          0 <=
          (day =
            (newYear = new Date(this.getFullYear(), 0, 1)).getDay() - dowOffset)
            ? day
            : day + 7),
        (daynum =
          Math.floor(
            (this.getTime() -
              newYear.getTime() -
              6e4 * (this.getTimezoneOffset() - newYear.getTimezoneOffset())) /
              864e5
          ) + 1),
        day < 4
          ? 52 < (weeknum = Math.floor((daynum + day - 1) / 7) + 1) &&
            (weeknum =
              (nday =
                0 <=
                (nday =
                  new Date(this.getFullYear() + 1, 0, 1).getDay() - dowOffset)
                  ? nday
                  : nday + 7) < 4
                ? 1
                : 53)
          : (weeknum = Math.floor((daynum + day - 1) / 7)),
        weeknum
      );
    }),
    (Date.prototype.getYear = function() {
      return this.getFullYear()
        .toString()
        .substr(-2);
    }),
    (Date.prototype.format = function(format, locale) {
      void 0 === locale && (locale = "en-US");
      var cal = (void 0 !== Metro.locales && void 0 !== Metro.locales[locale]
          ? Metro.locales[locale]
          : Metro.locales["en-US"]
        ).calendar,
        date = this,
        nDay = date.getDay(),
        nDate = date.getDate(),
        nMonth = date.getMonth(),
        nYear = date.getFullYear(),
        nHour = date.getHours(),
        aDays = cal.days,
        aMonths = cal.months,
        aDayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
        getThursday = function() {
          var target = new Date(date);
          return target.setDate(nDate - ((nDay + 6) % 7) + 3), target;
        },
        zeroPad = function(nNum, nPad) {
          return ("" + (Math.pow(10, nPad) + nNum)).slice(1);
        };
      return format.replace(/(%[a-z])/gi, function(sMatch) {
        return (
          {
            "%a": aDays[nDay].slice(0, 3),
            "%A": aDays[nDay],
            "%b": aMonths[nMonth].slice(0, 3),
            "%B": aMonths[nMonth],
            "%c": date.toUTCString(),
            "%C": Math.floor(nYear / 100),
            "%d": zeroPad(nDate, 2),
            dd: zeroPad(nDate, 2),
            "%e": nDate,
            "%F": date.toISOString().slice(0, 10),
            "%G": getThursday().getFullYear(),
            "%g": ("" + getThursday().getFullYear()).slice(2),
            "%H": zeroPad(nHour, 2),
            "%I": zeroPad(((nHour + 11) % 12) + 1, 2),
            "%j": zeroPad(
              aDayCount[nMonth] +
                nDate +
                (1 < nMonth &&
                ((nYear % 4 == 0 && nYear % 100 != 0) || nYear % 400 == 0)
                  ? 1
                  : 0),
              3
            ),
            "%k": "" + nHour,
            "%l": ((nHour + 11) % 12) + 1,
            "%m": zeroPad(nMonth + 1, 2),
            "%M": zeroPad(date.getMinutes(), 2),
            "%p": nHour < 12 ? "AM" : "PM",
            "%P": nHour < 12 ? "am" : "pm",
            "%s": Math.round(date.getTime() / 1e3),
            "%S": zeroPad(date.getSeconds(), 2),
            "%u": nDay || 7,
            "%V": (function() {
              var target = getThursday(),
                n1stThu = target.valueOf();
              target.setMonth(0, 1);
              var nJan1 = target.getDay();
              return (
                4 !== nJan1 && target.setMonth(0, 1 + ((4 - nJan1 + 7) % 7)),
                zeroPad(1 + Math.ceil((n1stThu - target) / 6048e5), 2)
              );
            })(),
            "%w": "" + nDay,
            "%x": date.toLocaleDateString(),
            "%X": date.toLocaleTimeString(),
            "%y": ("" + nYear).slice(2),
            "%Y": nYear,
            "%z": date.toTimeString().replace(/.+GMT([+-]\d+).+/, "$1"),
            "%Z": date.toTimeString().replace(/.+\((.+?)\)$/, "$1")
          }[sMatch] || sMatch
        );
      });
    }),
    (Date.prototype.addHours = function(n) {
      return this.setTime(this.getTime() + 60 * n * 60 * 1e3), this;
    }),
    (Date.prototype.addDays = function(n) {
      return this.setDate(this.getDate() + n), this;
    }),
    (Date.prototype.addMonths = function(n) {
      return this.setMonth(this.getMonth() + n), this;
    }),
    (Date.prototype.addYears = function(n) {
      return this.setFullYear(this.getFullYear() + n), this;
    });
  var Utils = {
    isUrl: function(val) {
      return /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@\-\/]))?/.test(
        val
      );
    },
    isTag: function(val) {
      return /^<\/?[\w\s="/.':;#-\/\?]+>/gi.test(val);
    },
    isColor: function(val) {
      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(val);
    },
    isEmbedObject: function(val) {
      var result = !1;
      return (
        $.each(["iframe", "object", "embed", "video"], function(i, v) {
          "string" == typeof val && val.toLowerCase() === v
            ? (result = !0)
            : void 0 !== val.nodeType &&
              val.tagName.toLowerCase() === v &&
              (result = !0);
        }),
        result
      );
    },
    isVideoUrl: function(val) {
      return /youtu\.be|youtube|vimeo/gi.test(val);
    },
    isDate: function(val, format) {
      return (
        !("object" != typeof val || !Utils.isFunc(val.getMonth)) ||
        "Invalid Date" !==
          (Utils.isValue(format)
            ? String(val).toDate(format)
            : String(new Date(val)))
      );
    },
    isDateObject: function(v) {
      return "object" == typeof v && void 0 !== v.getMonth;
    },
    isInt: function(n) {
      return Number(n) === n && n % 1 == 0;
    },
    isFloat: function(n) {
      return Number(n) === n && n % 1 != 0;
    },
    isTouchDevice: function() {
      return (
        "ontouchstart" in window ||
        0 < navigator.MaxTouchPoints ||
        0 < navigator.msMaxTouchPoints
      );
    },
    isFunc: function(f) {
      return Utils.isType(f, "function");
    },
    isObject: function(o) {
      return Utils.isType(o, "object");
    },
    isArray: function(a) {
      return Array.isArray(a);
    },
    isType: function(o, t) {
      if (null == o) return !1;
      if (typeof o === t) return o;
      if (Utils.isTag(o) || Utils.isUrl(o)) return !1;
      if (typeof window[o] === t) return window[o];
      if ("string" == typeof o && -1 === o.indexOf(".")) return !1;
      if ("string" == typeof o && -1 !== o.indexOf(" ")) return !1;
      if ("string" == typeof o && -1 !== o.indexOf("(")) return !1;
      if ("string" == typeof o && -1 !== o.indexOf("[")) return !1;
      if ("number" == typeof o && "number" !== t.toLowerCase()) return !1;
      var i,
        ns = o.split("."),
        context = window;
      for (i = 0; i < ns.length; i++) context = context[ns[i]];
      return typeof context === t && context;
    },
    isMetroObject: function(el, type) {
      var $el = $(el),
        el_obj = $el.data(type);
      return 0 === $el.length
        ? (console.log(type + " " + el + " not found!"), !1)
        : void 0 !== el_obj ||
            (console.log(
              "Element not contain role " +
                type +
                '! Please add attribute data-role="' +
                type +
                '" to element ' +
                el
            ),
            !1);
    },
    isJQuery: function(el) {
      return void 0 !== jQuery && el instanceof jQuery;
    },
    isM4Q: function(el) {
      return "undefined" != typeof m4q && el instanceof m4q;
    },
    isQ: function(el) {
      return Utils.isJQuery(el) || Utils.isM4Q(el);
    },
    embedObject: function(val) {
      return "<div class='embed-container'>" + $(val)[0].outerHTML + "</div>";
    },
    embedUrl: function(val) {
      return (
        -1 !== val.indexOf("youtu.be") &&
          (val = "https://www.youtube.com/embed/" + val.split("/").pop()),
        "<div class='embed-container'><iframe src='" + val + "'></iframe></div>"
      );
    },
    secondsToTime: function(secs) {
      var divisor_for_minutes = secs % 3600,
        divisor_for_seconds = divisor_for_minutes % 60;
      return {
        h: Math.floor(secs / 3600),
        m: Math.floor(divisor_for_minutes / 60),
        s: Math.ceil(divisor_for_seconds)
      };
    },
    hex2rgba: function(hex, alpha) {
      var c;
      if (
        ((alpha = isNaN(alpha) ? 1 : alpha),
        /^#([A-Fa-f0-9]{3}){1,2}$/.test(hex))
      )
        return (
          3 === (c = hex.substring(1).split("")).length &&
            (c = [c[0], c[0], c[1], c[1], c[2], c[2]]),
          "rgba(" +
            [
              ((c = "0x" + c.join("")) >> 16) & 255,
              (c >> 8) & 255,
              255 & c
            ].join(",") +
            "," +
            alpha +
            ")"
        );
      throw new Error("Hex2rgba error. Bad Hex value");
    },
    random: function(from, to) {
      return Math.floor(Math.random() * (to - from + 1) + from);
    },
    uniqueId: function() {
      var d = new Date().getTime();
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(
        c
      ) {
        var r = (d + 16 * Math.random()) % 16 | 0;
        return (
          (d = Math.floor(d / 16)), ("x" === c ? r : (3 & r) | 8).toString(16)
        );
      });
    },
    elementId: function(prefix) {
      return prefix + "-" + new Date().getTime() + Utils.random(1, 1e3);
    },
    secondsToFormattedString: function(time) {
      var sec_num = parseInt(time, 10),
        hours = Math.floor(sec_num / 3600),
        minutes = Math.floor((sec_num - 3600 * hours) / 60),
        seconds = sec_num - 3600 * hours - 60 * minutes;
      return (
        hours < 10 && (hours = "0" + hours),
        minutes < 10 && (minutes = "0" + minutes),
        seconds < 10 && (seconds = "0" + seconds),
        [hours, minutes, seconds].join(":")
      );
    },
    callback: function(f, args, context) {
      return Utils.exec(f, args, context);
    },
    func: function(f) {
      return new Function("a", f);
    },
    exec: function(f, args, context) {
      var result;
      if (null == f) return !1;
      var func = Utils.isFunc(f);
      !1 === func && (func = Utils.func(f));
      try {
        result = func.apply(context, args);
      } catch (err) {
        if (!(result = null) === METRO_THROWS) throw err;
      }
      return result;
    },
    isOutsider: function(element) {
      var rect,
        el = $(element),
        clone = el.clone();
      return (
        clone
          .removeAttr("data-role")
          .css({
            visibility: "hidden",
            position: "absolute",
            display: "block"
          }),
        el.parent().append(clone),
        (rect = clone[0].getBoundingClientRect()),
        clone.remove(),
        0 <= rect.top &&
          0 <= rect.left &&
          rect.bottom <=
            (window.innerHeight || document.documentElement.clientHeight) &&
          rect.right <=
            (window.innerWidth || document.documentElement.clientWidth)
      );
    },
    inViewport: function(el) {
      var rect = Utils.rect(el);
      return (
        0 <= rect.top &&
        0 <= rect.left &&
        rect.bottom <=
          (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <=
          (window.innerWidth || document.documentElement.clientWidth)
      );
    },
    rect: function(el) {
      return (
        "function" == typeof jQuery && el instanceof jQuery && (el = el[0]),
        el.getBoundingClientRect()
      );
    },
    getCursorPosition: function(el, e) {
      var a = Utils.rect(el);
      return {
        x: Utils.pageXY(e).x - a.left - window.pageXOffset,
        y: Utils.pageXY(e).y - a.top - window.pageYOffset
      };
    },
    getCursorPositionX: function(el, e) {
      return Utils.getCursorPosition(el, e).x;
    },
    getCursorPositionY: function(el, e) {
      return Utils.getCursorPosition(el, e).y;
    },
    objectLength: function(obj) {
      return Object.keys(obj).length;
    },
    percent: function(total, part, round_value) {
      if (0 === total) return 0;
      var result = (100 * part) / total;
      return !0 === round_value
        ? Math.round(result)
        : Math.round(100 * result) / 100;
    },
    camelCase: function(str) {
      return str.replace(/-([a-z])/g, function(g) {
        return g[1].toUpperCase();
      });
    },
    dashedName: function(str) {
      return str.replace(/([A-Z])/g, function(u) {
        return "-" + u.toLowerCase();
      });
    },
    objectShift: function(obj) {
      var min = 0;
      return (
        $.each(obj, function(i) {
          0 === min ? (min = i) : i < min && (min = i);
        }),
        delete obj[min],
        obj
      );
    },
    objectDelete: function(obj, key) {
      void 0 !== obj[key] && delete obj[key];
    },
    arrayDeleteByMultipleKeys: function(arr, keys) {
      return (
        keys.forEach(function(ind) {
          delete arr[ind];
        }),
        arr.filter(function(item) {
          return void 0 !== item;
        })
      );
    },
    arrayDelete: function(arr, val) {
      -1 < arr.indexOf(val) && arr.splice(arr.indexOf(val), 1);
    },
    arrayDeleteByKey: function(arr, key) {
      arr.splice(key, 1);
    },
    nvl: function(data, other) {
      return null == data ? other : data;
    },
    objectClone: function(obj) {
      var copy = {};
      for (var key in obj) obj.hasOwnProperty(key) && (copy[key] = obj[key]);
      return copy;
    },
    github: function(repo, callback) {
      var that = this;
      $.ajax({
        url: "https://api.github.com/repos/" + repo,
        dataType: "jsonp"
      }).done(function(data) {
        that.callback(callback, [data.data]);
      });
    },
    detectIE: function() {
      var ua = window.navigator.userAgent,
        msie = ua.indexOf("MSIE ");
      if (0 < msie)
        return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
      if (0 < ua.indexOf("Trident/")) {
        var rv = ua.indexOf("rv:");
        return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
      }
      var edge = ua.indexOf("Edge/");
      return (
        0 < edge && parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10)
      );
    },
    detectChrome: function() {
      return (
        /Chrome/.test(navigator.userAgent) &&
        /Google Inc/.test(navigator.vendor)
      );
    },
    md5: function(s) {
      return hex_md5(s);
    },
    encodeURI: function(str) {
      return encodeURI(str)
        .replace(/%5B/g, "[")
        .replace(/%5D/g, "]");
    },
    pageHeight: function() {
      var body = document.body,
        html = document.documentElement;
      return Math.max(
        body.scrollHeight,
        body.offsetHeight,
        html.clientHeight,
        html.scrollHeight,
        html.offsetHeight
      );
    },
    cleanPreCode: function(selector) {
      Array.prototype.slice
        .call(document.querySelectorAll(selector), 0)
        .forEach(function(el) {
          var txt = el.textContent.replace(/^[\r\n]+/, "").replace(/\s+$/g, "");
          if (/^\S/gm.test(txt)) el.textContent = txt;
          else {
            for (
              var mat, str, len, re = /^[\t ]+/gm, min = 1e3;
              (mat = re.exec(txt));

            )
              (len = mat[0].length) < min && ((min = len), (str = mat[0]));
            1e3 !== min &&
              (el.textContent = txt.replace(new RegExp("^" + str, "gm"), ""));
          }
        });
    },
    coords: function(element) {
      var box = $(element)[0].getBoundingClientRect();
      return {
        top: box.top + window.pageYOffset,
        left: box.left + window.pageXOffset
      };
    },
    positionXY: function(e, t) {
      switch (t) {
        case "client":
          return Utils.clientXY(e);
        case "screen":
          return Utils.screenXY(e);
        case "page":
          return Utils.pageXY(e);
        default:
          return { x: 0, y: 0 };
      }
    },
    clientXY: function(e) {
      return {
        x: e.changedTouches ? e.changedTouches[0].clientX : e.clientX,
        y: e.changedTouches ? e.changedTouches[0].clientY : e.clientY
      };
    },
    screenXY: function(e) {
      return {
        x: e.changedTouches ? e.changedTouches[0].screenX : e.screenX,
        y: e.changedTouches ? e.changedTouches[0].screenY : e.screenY
      };
    },
    pageXY: function(e) {
      return {
        x: e.changedTouches ? e.changedTouches[0].pageX : e.pageX,
        y: e.changedTouches ? e.changedTouches[0].pageY : e.pageY
      };
    },
    isRightMouse: function(e) {
      return "which" in e
        ? 3 === e.which
        : "button" in e
        ? 2 === e.button
        : void 0;
    },
    hiddenElementSize: function(el, includeMargin) {
      var clone = $(el).clone();
      clone
        .removeAttr("data-role")
        .css({ visibility: "hidden", position: "absolute", display: "block" }),
        $("body").append(clone),
        void 0 === includeMargin && (includeMargin = !1);
      var width = clone.outerWidth(includeMargin),
        height = clone.outerHeight(includeMargin);
      return clone.remove(), { width: width, height: height };
    },
    getStyle: function(element, pseudo) {
      var el = $(element)[0];
      return window.getComputedStyle(el, pseudo);
    },
    getStyleOne: function(el, property) {
      return Utils.getStyle(el).getPropertyValue(property);
    },
    getTransformMatrix: function(el, returnArray) {
      var a = Utils.getStyleOne(el, "transform")
        .replace("matrix(", "")
        .slice(0, -1)
        .split(",");
      return !0 !== returnArray
        ? { a: a[0], b: a[1], c: a[2], d: a[3], tx: a[4], ty: a[5] }
        : a;
    },
    computedRgbToHex: function(rgb) {
      var i,
        a = rgb.replace(/[^\d,]/g, "").split(","),
        result = "#";
      for (i = 0; i < 3; i++) {
        var h = parseInt(a[i]).toString(16);
        result += 1 === h.length ? "0" + h : h;
      }
      return result;
    },
    computedRgbToRgba: function(rgb, alpha) {
      var a = rgb.replace(/[^\d,]/g, "").split(",");
      return (
        void 0 === alpha && (alpha = 1),
        a.push(alpha),
        "rgba(" + a.join(",") + ")"
      );
    },
    computedRgbToArray: function(rgb) {
      return rgb.replace(/[^\d,]/g, "").split(",");
    },
    hexColorToArray: function(hex) {
      var c;
      return /^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)
        ? (3 === (c = hex.substring(1).split("")).length &&
            (c = [c[0], c[0], c[1], c[1], c[2], c[2]]),
          [((c = "0x" + c.join("")) >> 16) & 255, (c >> 8) & 255, 255 & c])
        : [0, 0, 0];
    },
    hexColorToRgbA: function(hex, alpha) {
      var c;
      return /^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)
        ? (3 === (c = hex.substring(1).split("")).length &&
            (c = [c[0], c[0], c[1], c[1], c[2], c[2]]),
          "rgba(" +
            [
              ((c = "0x" + c.join("")) >> 16) & 255,
              (c >> 8) & 255,
              255 & c,
              alpha || 1
            ].join(",") +
            ")")
        : "rgba(0,0,0,1)";
    },
    getInlineStyles: function(element) {
      var i,
        l,
        styles = {},
        el = $(element)[0];
      for (i = 0, l = el.style.length; i < l; i++) {
        var s = el.style[i];
        styles[s] = el.style[s];
      }
      return styles;
    },
    updateURIParameter: function(uri, key, value) {
      var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i"),
        separator = -1 !== uri.indexOf("?") ? "&" : "?";
      return uri.match(re)
        ? uri.replace(re, "$1" + key + "=" + value + "$2")
        : uri + separator + key + "=" + value;
    },
    getURIParameter: function(url, name) {
      url || (url = window.location.href),
        (name = name.replace(/[\[\]]/g, "\\$&"));
      var results = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)").exec(url);
      return results
        ? results[2]
          ? decodeURIComponent(results[2].replace(/\+/g, " "))
          : ""
        : null;
    },
    getLocales: function() {
      return Object.keys(Metro.locales);
    },
    addLocale: function(locale) {
      Metro.locales = $.extend({}, Metro.locales, locale);
    },
    strToArray: function(str, delimiter, type, format) {
      return (
        Utils.isValue(delimiter) || (delimiter = ","),
        Utils.isValue(type) || (type = "string"),
        ("" + str).split(delimiter).map(function(s) {
          var result;
          switch (type) {
            case "int":
            case "integer":
              result = parseInt(s);
              break;
            case "number":
            case "float":
              result = parseFloat(s);
              break;
            case "date":
              result = Utils.isValue(format) ? s.toDate(format) : new Date(s);
              break;
            default:
              result = s.trim();
          }
          return result;
        })
      );
    },
    aspectRatioH: function(width, a) {
      return "16/9" === a
        ? (9 * width) / 16
        : "21/9" === a
        ? (9 * width) / 21
        : "4/3" === a
        ? (3 * width) / 4
        : void 0;
    },
    aspectRatioW: function(height, a) {
      return "16/9" === a
        ? (16 * height) / 9
        : "21/9" === a
        ? (21 * height) / 9
        : "4/3" === a
        ? (4 * height) / 3
        : void 0;
    },
    valueInObject: function(obj, value) {
      return -1 < Object.values(obj).indexOf(value);
    },
    keyInObject: function(obj, key) {
      return -1 < Object.keys(obj).indexOf(key);
    },
    inObject: function(obj, key, val) {
      return void 0 !== obj[key] && obj[key] === val;
    },
    newCssSheet: function(media) {
      var style = document.createElement("style");
      return (
        void 0 !== media && style.setAttribute("media", media),
        style.appendChild(document.createTextNode("")),
        document.head.appendChild(style),
        style.sheet
      );
    },
    addCssRule: function(sheet, selector, rules, index) {
      "insertRule" in sheet
        ? sheet.insertRule(selector + "{" + rules + "}", index)
        : "addRule" in sheet && sheet.addRule(selector, rules, index);
    },
    media: function(query) {
      return window.matchMedia(query).matches;
    },
    mediaModes: function() {
      return METRO_MEDIA;
    },
    mediaExist: function(media) {
      return -1 < METRO_MEDIA.indexOf(media);
    },
    inMedia: function(media) {
      return (
        -1 < METRO_MEDIA.indexOf(media) &&
        METRO_MEDIA.indexOf(media) === METRO_MEDIA.length - 1
      );
    },
    isValue: function(val) {
      return null != val && "" !== val;
    },
    isNull: function(val) {
      return null == val;
    },
    isNegative: function(val) {
      return parseFloat(val) < 0;
    },
    isPositive: function(val) {
      return 0 < parseFloat(val);
    },
    isZero: function(val) {
      return 0 === parseFloat(val.toFixed(2));
    },
    between: function(val, bottom, top, equals) {
      return !0 === equals
        ? bottom <= val && val <= top
        : bottom < val && val < top;
    },
    parseMoney: function(val) {
      return Number(parseFloat(val.replace(/[^0-9-.]/g, "")));
    },
    parseCard: function(val) {
      return val.replace(/[^0-9]/g, "");
    },
    parsePhone: function(val) {
      return Utils.parseCard(val);
    },
    isVisible: function(element) {
      var el = $(element)[0];
      return (
        "none" !== Utils.getStyleOne(el, "display") &&
        "hidden" !== Utils.getStyleOne(el, "visibility") &&
        null !== el.offsetParent
      );
    },
    parseNumber: function(val, thousand, decimal) {
      return val
        .replace(new RegExp("\\" + thousand, "g"), "")
        .replace(new RegExp("\\" + decimal, "g"), ".");
    },
    nearest: function(val, precision, down) {
      return (
        (val /= precision),
        (val = Math[!0 === down ? "floor" : "ceil"](val) * precision)
      );
    },
    bool: function(value) {
      switch (value) {
        case !0:
        case "true":
        case 1:
        case "1":
        case "on":
        case "yes":
          return !0;
        default:
          return !1;
      }
    },
    copy: function(element) {
      var range,
        sel,
        body = document.body,
        el = $(element)[0];
      if (document.createRange && window.getSelection) {
        (range = document.createRange()),
          (sel = window.getSelection()).removeAllRanges();
        try {
          range.selectNodeContents(el), sel.addRange(range);
        } catch (e) {
          range.selectNode(el), sel.addRange(range);
        }
      } else
        body.createTextRange &&
          ((range = body.createTextRange()).moveToElementText(el),
          range.select());
      document.execCommand("Copy"),
        window.getSelection
          ? window.getSelection().empty
            ? window.getSelection().empty()
            : window.getSelection().removeAllRanges &&
              window.getSelection().removeAllRanges()
          : document.selection && document.selection.empty();
    },
    isLocalhost: function() {
      return (
        "localhost" === location.hostname ||
        "127.0.0.1" === location.hostname ||
        "" === location.hostname
      );
    },
    formData: function(f) {
      var i,
        j,
        form = $(f)[0],
        q = {};
      if (form && "FORM" === form.nodeName) {
        for (i = form.elements.length - 1; 0 <= i; i -= 1)
          if ("" !== form.elements[i].name)
            switch (form.elements[i].nodeName) {
              case "INPUT":
                switch (form.elements[i].type) {
                  case "text":
                  case "hidden":
                  case "password":
                  case "button":
                  case "reset":
                  case "submit":
                    q[form.elements[i].name] = form.elements[i].value;
                    break;
                  case "checkbox":
                  case "radio":
                    form.elements[i].checked &&
                      (q[form.elements[i].name] = form.elements[i].value);
                }
                break;
              case "file":
                break;
              case "TEXTAREA":
                q[form.elements[i].name] = form.elements[i].value;
                break;
              case "SELECT":
                switch (form.elements[i].type) {
                  case "select-one":
                    q[form.elements[i].name] = form.elements[i].value;
                    break;
                  case "select-multiple":
                    for (
                      q[form.elements[i].name] = [],
                        j = form.elements[i].options.length - 1;
                      0 <= j;
                      j -= 1
                    )
                      form.elements[i].options[j].selected &&
                        q[form.elements[i].name].push(
                          form.elements[i].options[j].value
                        );
                }
                break;
              case "BUTTON":
                switch (form.elements[i].type) {
                  case "reset":
                  case "submit":
                  case "button":
                    q[form.elements[i].name] = form.elements[i].value;
                }
            }
        return q;
      }
    }
  };
  Metro.utils = Utils;
  var Animation = {
    duration: METRO_ANIMATION_DURATION,
    func: "swing",
    switch: function(current, next) {
      current.hide(), next.css({ top: 0, left: 0 }).show();
    },
    slideUp: function(current, next, duration, func) {
      var h = current.parent().outerHeight(!0);
      void 0 === duration && (duration = this.duration),
        void 0 === func && (func = this.func),
        current
          .css("z-index", 1)
          .animate({ top: -h, opacity: 0 }, duration, func),
        next
          .css({ top: h, left: 0, zIndex: 2 })
          .animate({ top: 0, opacity: 1 }, duration, func);
    },
    slideDown: function(current, next, duration, func) {
      var h = current.parent().outerHeight(!0);
      void 0 === duration && (duration = this.duration),
        void 0 === func && (func = this.func),
        current
          .css("z-index", 1)
          .animate({ top: h, opacity: 0 }, duration, func),
        next
          .css({ left: 0, top: -h, zIndex: 2 })
          .animate({ top: 0, opacity: 1 }, duration, func);
    },
    slideLeft: function(current, next, duration, func) {
      var w = current.parent().outerWidth(!0);
      void 0 === duration && (duration = this.duration),
        void 0 === func && (func = this.func),
        current
          .css("z-index", 1)
          .animate({ left: -w, opacity: 0 }, duration, func),
        next
          .css({ left: w, zIndex: 2 })
          .animate({ left: 0, opacity: 1 }, duration, func);
    },
    slideRight: function(current, next, duration, func) {
      var w = current.parent().outerWidth(!0);
      void 0 === duration && (duration = this.duration),
        void 0 === func && (func = this.func),
        current
          .css("z-index", 1)
          .animate({ left: w, opacity: 0 }, duration, func),
        next
          .css({ left: -w, zIndex: 2 })
          .animate({ left: 0, opacity: 1 }, duration, func);
    },
    fade: function(current, next, duration) {
      void 0 === duration && (duration = this.duration),
        current.animate({ opacity: 0 }, duration),
        next.css({ top: 0, left: 0 }).animate({ opacity: 1 }, duration);
    }
  };
  function RGB(r, g, b) {
    (this.r = r || 0), (this.g = g || 0), (this.g = b || 0);
  }
  function HSV(h, s, v) {
    (this.h = h || 0), (this.s = s || 0), (this.v = v || 0);
  }
  function CMYK(c, m, y, k) {
    (this.c = c || 0), (this.m = m || 0), (this.y = y || 0), (this.k = k || 0);
  }
  Metro.animation = Animation;
  var Colors = {
    TYPES: {
      HEX: "hex",
      RGB: "rgb",
      RGBA: "rgba",
      HSV: "hsv",
      HSL: "hsl",
      CMYK: "cmyk",
      UNKNOWN: "unknown"
    },
    PALETTES: {
      ALL: "colorList",
      METRO: "colorListMetro",
      STANDARD: "colorListStandard"
    },
    colorListMetro: {
      lime: "#a4c400",
      green: "#60a917",
      emerald: "#008a00",
      blue: "#00AFF0",
      teal: "#00aba9",
      cyan: "#1ba1e2",
      cobalt: "#0050ef",
      indigo: "#6a00ff",
      violet: "#aa00ff",
      pink: "#dc4fad",
      magenta: "#d80073",
      crimson: "#a20025",
      red: "#CE352C",
      orange: "#fa6800",
      amber: "#f0a30a",
      yellow: "#fff000",
      brown: "#825a2c",
      olive: "#6d8764",
      steel: "#647687",
      mauve: "#76608a",
      taupe: "#87794e"
    },
    colorListStandard: {
      aliceBlue: "#f0f8ff",
      antiqueWhite: "#faebd7",
      aqua: "#00ffff",
      aquamarine: "#7fffd4",
      azure: "#f0ffff",
      beige: "#f5f5dc",
      bisque: "#ffe4c4",
      black: "#000000",
      blanchedAlmond: "#ffebcd",
      blue: "#0000ff",
      blueViolet: "#8a2be2",
      brown: "#a52a2a",
      burlyWood: "#deb887",
      cadetBlue: "#5f9ea0",
      chartreuse: "#7fff00",
      chocolate: "#d2691e",
      coral: "#ff7f50",
      cornflowerBlue: "#6495ed",
      cornsilk: "#fff8dc",
      crimson: "#dc143c",
      cyan: "#00ffff",
      darkBlue: "#00008b",
      darkCyan: "#008b8b",
      darkGoldenRod: "#b8860b",
      darkGray: "#a9a9a9",
      darkGreen: "#006400",
      darkKhaki: "#bdb76b",
      darkMagenta: "#8b008b",
      darkOliveGreen: "#556b2f",
      darkOrange: "#ff8c00",
      darkOrchid: "#9932cc",
      darkRed: "#8b0000",
      darkSalmon: "#e9967a",
      darkSeaGreen: "#8fbc8f",
      darkSlateBlue: "#483d8b",
      darkSlateGray: "#2f4f4f",
      darkTurquoise: "#00ced1",
      darkViolet: "#9400d3",
      deepPink: "#ff1493",
      deepSkyBlue: "#00bfff",
      dimGray: "#696969",
      dodgerBlue: "#1e90ff",
      fireBrick: "#b22222",
      floralWhite: "#fffaf0",
      forestGreen: "#228b22",
      fuchsia: "#ff00ff",
      gainsboro: "#DCDCDC",
      ghostWhite: "#F8F8FF",
      gold: "#ffd700",
      goldenRod: "#daa520",
      gray: "#808080",
      green: "#008000",
      greenYellow: "#adff2f",
      honeyDew: "#f0fff0",
      hotPink: "#ff69b4",
      indianRed: "#cd5c5c",
      indigo: "#4b0082",
      ivory: "#fffff0",
      khaki: "#f0e68c",
      lavender: "#e6e6fa",
      lavenderBlush: "#fff0f5",
      lawnGreen: "#7cfc00",
      lemonChiffon: "#fffacd",
      lightBlue: "#add8e6",
      lightCoral: "#f08080",
      lightCyan: "#e0ffff",
      lightGoldenRodYellow: "#fafad2",
      lightGray: "#d3d3d3",
      lightGreen: "#90ee90",
      lightPink: "#ffb6c1",
      lightSalmon: "#ffa07a",
      lightSeaGreen: "#20b2aa",
      lightSkyBlue: "#87cefa",
      lightSlateGray: "#778899",
      lightSteelBlue: "#b0c4de",
      lightYellow: "#ffffe0",
      lime: "#00ff00",
      limeGreen: "#32dc32",
      linen: "#faf0e6",
      magenta: "#ff00ff",
      maroon: "#800000",
      mediumAquaMarine: "#66cdaa",
      mediumBlue: "#0000cd",
      mediumOrchid: "#ba55d3",
      mediumPurple: "#9370db",
      mediumSeaGreen: "#3cb371",
      mediumSlateBlue: "#7b68ee",
      mediumSpringGreen: "#00fa9a",
      mediumTurquoise: "#48d1cc",
      mediumVioletRed: "#c71585",
      midnightBlue: "#191970",
      mintCream: "#f5fffa",
      mistyRose: "#ffe4e1",
      moccasin: "#ffe4b5",
      navajoWhite: "#ffdead",
      navy: "#000080",
      oldLace: "#fdd5e6",
      olive: "#808000",
      oliveDrab: "#6b8e23",
      orange: "#ffa500",
      orangeRed: "#ff4500",
      orchid: "#da70d6",
      paleGoldenRod: "#eee8aa",
      paleGreen: "#98fb98",
      paleTurquoise: "#afeeee",
      paleVioletRed: "#db7093",
      papayaWhip: "#ffefd5",
      peachPuff: "#ffdab9",
      peru: "#cd853f",
      pink: "#ffc0cb",
      plum: "#dda0dd",
      powderBlue: "#b0e0e6",
      purple: "#800080",
      rebeccaPurple: "#663399",
      red: "#ff0000",
      rosyBrown: "#bc8f8f",
      royalBlue: "#4169e1",
      saddleBrown: "#8b4513",
      salmon: "#fa8072",
      sandyBrown: "#f4a460",
      seaGreen: "#2e8b57",
      seaShell: "#fff5ee",
      sienna: "#a0522d",
      silver: "#c0c0c0",
      slyBlue: "#87ceeb",
      slateBlue: "#6a5acd",
      slateGray: "#708090",
      snow: "#fffafa",
      springGreen: "#00ff7f",
      steelBlue: "#4682b4",
      tan: "#d2b48c",
      teal: "#008080",
      thistle: "#d8bfd8",
      tomato: "#ff6347",
      turquoise: "#40e0d0",
      violet: "#ee82ee",
      wheat: "#f5deb3",
      white: "#ffffff",
      whiteSmoke: "#f5f5f5",
      yellow: "#ffff00",
      yellowGreen: "#9acd32"
    },
    colorList: {},
    options: {
      angle: 30,
      algorithm: 1,
      step: 0.1,
      distance: 5,
      tint1: 0.8,
      tint2: 0.4,
      shade1: 0.6,
      shade2: 0.3,
      alpha: 1
    },
    init: function() {
      return (
        (this.colorList = $.extend(
          {},
          this.colorListStandard,
          this.colorListMetro
        )),
        this
      );
    },
    setup: function(options) {
      this.options = $.extend({}, this.options, options);
    },
    color: function(name, palette) {
      return (
        void 0 !== this[(palette = palette || this.PALETTES.ALL)][name] &&
        this[palette][name]
      );
    },
    palette: function(palette) {
      return (
        (palette = palette || this.PALETTES.ALL), Object.keys(this[palette])
      );
    },
    colors: function(palette) {
      var c = [];
      return (
        (palette = palette || this.PALETTES.ALL),
        $.each(this[palette], function() {
          c.push(this);
        }),
        c
      );
    },
    hex2rgb: function(hex) {
      hex = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(
        m,
        r,
        g,
        b
      ) {
        return r + r + g + g + b + b;
      });
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
          }
        : null;
    },
    rgb2hex: function(rgb) {
      return (
        "#" +
        ((1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b).toString(16).slice(1)
      );
    },
    rgb2hsv: function(rgb) {
      var h,
        s,
        v,
        hsv = new HSV(),
        r = rgb.r / 255,
        g = rgb.g / 255,
        b = rgb.b / 255,
        max = Math.max(r, g, b),
        min = Math.min(r, g, b),
        delta = max - min;
      return (
        (s = 0 === (v = max) ? 0 : 1 - min / max),
        (h =
          max === min
            ? 0
            : max === r && b <= g
            ? ((g - b) / delta) * 60
            : max === r && g < b
            ? ((g - b) / delta) * 60 + 360
            : max === g
            ? ((b - r) / delta) * 60 + 120
            : max === b
            ? ((r - g) / delta) * 60 + 240
            : 0),
        (hsv.h = h),
        (hsv.s = s),
        (hsv.v = v),
        hsv
      );
    },
    hsv2rgb: function(hsv) {
      var r,
        g,
        b,
        h = hsv.h,
        s = 100 * hsv.s,
        v = 100 * hsv.v,
        Vmin = ((100 - s) * v) / 100,
        alpha = ((h % 60) / 60) * (v - Vmin),
        Vinc = Vmin + alpha,
        Vdec = v - alpha;
      switch (Math.floor(h / 60)) {
        case 0:
          (r = v), (g = Vinc), (b = Vmin);
          break;
        case 1:
          (r = Vdec), (g = v), (b = Vmin);
          break;
        case 2:
          (r = Vmin), (g = v), (b = Vinc);
          break;
        case 3:
          (r = Vmin), (g = Vdec), (b = v);
          break;
        case 4:
          (r = Vinc), (g = Vmin), (b = v);
          break;
        case 5:
          (r = v), (g = Vmin), (b = Vdec);
      }
      return {
        r: Math.round((255 * r) / 100),
        g: Math.round((255 * g) / 100),
        b: Math.round((255 * b) / 100)
      };
    },
    hsv2hex: function(hsv) {
      return this.rgb2hex(this.hsv2rgb(hsv));
    },
    hex2hsv: function(hex) {
      return this.rgb2hsv(this.hex2rgb(hex));
    },
    rgb2cmyk: function(rgb) {
      var cmyk = new CMYK(),
        r = rgb.r / 255,
        g = rgb.g / 255,
        b = rgb.b / 255;
      return (
        (cmyk.k = Math.min(1 - r, 1 - g, 1 - b)),
        (cmyk.c = (1 - r - cmyk.k) / (1 - cmyk.k)),
        (cmyk.m = (1 - g - cmyk.k) / (1 - cmyk.k)),
        (cmyk.y = (1 - b - cmyk.k) / (1 - cmyk.k)),
        (cmyk.c = Math.round(100 * cmyk.c)),
        (cmyk.m = Math.round(100 * cmyk.m)),
        (cmyk.y = Math.round(100 * cmyk.y)),
        (cmyk.k = Math.round(100 * cmyk.k)),
        cmyk
      );
    },
    cmyk2rgb: function(cmyk) {
      var rgb = new RGB(),
        c = cmyk.c / 100,
        m = cmyk.m / 100,
        y = cmyk.y / 100,
        k = cmyk.k / 100;
      return (
        (rgb.r = 1 - Math.min(1, c * (1 - k) + k)),
        (rgb.g = 1 - Math.min(1, m * (1 - k) + k)),
        (rgb.b = 1 - Math.min(1, y * (1 - k) + k)),
        (rgb.r = Math.round(255 * rgb.r)),
        (rgb.g = Math.round(255 * rgb.g)),
        (rgb.b = Math.round(255 * rgb.b)),
        rgb
      );
    },
    hsv2hsl: function(hsv) {
      var h, s, l;
      return (
        (h = hsv.h),
        (l = (2 - hsv.s) * hsv.v),
        (s = hsv.s * hsv.v),
        { h: h, s: (s /= l <= 1 ? l : 2 - l), l: (l /= 2) }
      );
    },
    hsl2hsv: function(hsl) {
      var h, s, v, l;
      return (
        (h = hsl.h),
        (v = ((l = 2 * hsl.l) + (s = hsl.s * (l <= 1 ? l : 2 - l))) / 2),
        { h: h, s: (s = (2 * s) / (l + s)), l: v }
      );
    },
    rgb2websafe: function(rgb) {
      return {
        r: 51 * Math.round(rgb.r / 51),
        g: 51 * Math.round(rgb.g / 51),
        b: 51 * Math.round(rgb.b / 51)
      };
    },
    rgba2websafe: function(rgba) {
      return {
        r: 51 * Math.round(rgba.r / 51),
        g: 51 * Math.round(rgba.g / 51),
        b: 51 * Math.round(rgba.b / 51),
        a: rgba.a
      };
    },
    hex2websafe: function(hex) {
      return this.rgb2hex(this.rgb2websafe(this.toRGB(hex)));
    },
    hsv2websafe: function(hsv) {
      return this.rgb2hsv(this.rgb2websafe(this.toRGB(hsv)));
    },
    hsl2websafe: function(hsl) {
      return this.hsv2hsl(this.rgb2hsv(this.rgb2websafe(this.toRGB(hsl))));
    },
    cmyk2websafe: function(cmyk) {
      return this.rgb2cmyk(this.rgb2websafe(this.cmyk2rgb(cmyk)));
    },
    websafe: function(color) {
      return this.isHEX(color)
        ? this.hex2websafe(color)
        : this.isRGB(color)
        ? this.rgb2websafe(color)
        : this.isRGBA(color)
        ? this.rgba2websafe(color)
        : this.isHSV(color)
        ? this.hsv2websafe(color)
        : this.isHSL(color)
        ? this.hsl2websafe(color)
        : this.isCMYK(color)
        ? this.cmyk2websafe(color)
        : color;
    },
    is: function(color) {
      return this.isHEX(color)
        ? this.TYPES.HEX
        : this.isRGB(color)
        ? this.TYPES.RGB
        : this.isRGBA(color)
        ? this.TYPES.RGBA
        : this.isHSV(color)
        ? this.TYPES.HSV
        : this.isHSL(color)
        ? this.TYPES.HSL
        : this.isCMYK(color)
        ? this.TYPES.CMYK
        : this.TYPES.UNKNOWN;
    },
    toRGB: function(color) {
      if (this.isHSV(color)) return this.hsv2rgb(color);
      if (this.isHSL(color)) return this.hsv2rgb(this.hsl2hsv(color));
      if (this.isRGB(color)) return color;
      if (this.isHEX(color)) return this.hex2rgb(color);
      if (this.isCMYK(color)) return this.cmyk2rgb(color);
      throw new Error("Unknown color format!");
    },
    toRGBA: function(color, alpha) {
      var result = this.toRGB(color);
      return (result.a = alpha || 1), result;
    },
    toHSV: function(color) {
      return this.rgb2hsv(this.toRGB(color));
    },
    toHSL: function(color) {
      return this.hsv2hsl(this.rgb2hsv(this.toRGB(color)));
    },
    toHSLA: function(color, alpha) {
      var hsla;
      return (
        ((hsla = this.hsv2hsl(this.rgb2hsv(this.toRGB(color)))).a =
          alpha || this.options.alpha),
        hsla
      );
    },
    toHEX: function(color) {
      return this.rgb2hex(this.toRGB(color));
    },
    toCMYK: function(color) {
      return this.rgb2cmyk(this.toRGB(color));
    },
    toHexString: function(color) {
      return this.toHEX(color);
    },
    toHsvString: function(color) {
      var hsv = this.toHSV(color);
      return "hsv(" + [hsv.h, hsv.s, hsv.v].join(",") + ")";
    },
    toHslString: function(color) {
      var hsl = this.toHSL(color);
      return (
        "hsl(" +
        [
          Math.round(hsl.h),
          Math.round(100 * hsl.s) + "%",
          Math.round(100 * hsl.l) + "%"
        ].join(",") +
        ")"
      );
    },
    toHslaString: function(color) {
      var hsl = this.toHSLA(color);
      return (
        "hsl(" +
        [
          Math.round(hsl.h),
          Math.round(100 * hsl.s) + "%",
          Math.round(100 * hsl.l) + "%",
          hsl.a
        ].join(",") +
        ")"
      );
    },
    toCmykString: function(color) {
      var cmyk = this.toCMYK(color);
      return "cmyk(" + [cmyk.c, cmyk.m, cmyk.y, cmyk.k].join(",") + ")";
    },
    toRgbString: function(color) {
      var rgb = this.toRGB(color);
      return "rgb(" + [rgb.r, rgb.g, rgb.b].join(",") + ")";
    },
    toRgbaString: function(color) {
      var rgb = this.toRGBA(color);
      return "rgba(" + [rgb.r, rgb.g, rgb.b, rgb.a].join(",") + ")";
    },
    toString: function(color) {
      if (this.isHEX(color)) return this.toHexString(color);
      if (this.isRGB(color)) return this.toRgbString(color);
      if (this.isRGBA(color)) return this.toRgbaString(color);
      if (this.isHSV(color)) return this.toHsvString(color);
      if (this.isHSL(color)) return this.toHslString(color);
      if (this.isHSLA(color)) return this.toHslaString(color);
      if (this.isCMYK(color)) return this.toCmykString(color);
      throw new Error("Unknown color format!");
    },
    grayscale: function(color, output) {
      output = output || "hex";
      var rgb = this.toRGB(color),
        gray = Math.round(0.2125 * rgb.r + 0.7154 * rgb.g + 0.0721 * rgb.b),
        mono = { r: gray, g: gray, b: gray };
      return this["rgb2" + output](mono);
    },
    darken: function(color, amount) {
      return (
        void 0 === amount && (amount = 10),
        this.lighten(color, -1 * Math.abs(amount))
      );
    },
    lighten: function(color, amount) {
      var type,
        res,
        alpha = 1,
        ring = 0 < amount,
        calc = function(_color, _amount) {
          var col = _color.slice(1),
            num = parseInt(col, 16),
            r = (num >> 16) + _amount;
          255 < r ? (r = 255) : r < 0 && (r = 0);
          var b = ((num >> 8) & 255) + _amount;
          255 < b ? (b = 255) : b < 0 && (b = 0);
          var g = (255 & num) + _amount;
          return (
            255 < g ? (g = 255) : g < 0 && (g = 0),
            (res = "#" + (g | (b << 8) | (r << 16)).toString(16))
          );
        };
      for (
        void 0 === amount && (amount = 10),
          (type = this.is(color)) === this.TYPES.RGBA && (alpha = color.a);
        (res = calc(this.toHEX(color), amount)),
          ring ? amount-- : amount++,
          res.length < 7;

      );
      switch (type) {
        case "rgb":
          return this.toRGB(res);
        case "rgba":
          return this.toRGBA(res, alpha);
        case "hsv":
          return this.toHSV(res);
        case "hsl":
          return this.toHSL(res);
        case "cmyk":
          return this.toCMYK(res);
        default:
          return res;
      }
    },
    isDark: function(color) {
      var rgb = this.toRGB(color);
      return (299 * rgb.r + 587 * rgb.g + 114 * rgb.b) / 1e3 < 128;
    },
    isLight: function(hex) {
      return !this.isDark(hex);
    },
    isHSV: function(val) {
      return Utils.isObject(val) && "h" in val && "s" in val && "v" in val;
    },
    isHSL: function(val) {
      return Utils.isObject(val) && "h" in val && "s" in val && "l" in val;
    },
    isHSLA: function(val) {
      return (
        Utils.isObject(val) &&
        "h" in val &&
        "s" in val &&
        "l" in val &&
        "a" in val
      );
    },
    isRGB: function(val) {
      return Utils.isObject(val) && "r" in val && "g" in val && "b" in val;
    },
    isRGBA: function(val) {
      return (
        Utils.isObject(val) &&
        "r" in val &&
        "g" in val &&
        "b" in val &&
        "a" in val
      );
    },
    isCMYK: function(val) {
      return (
        Utils.isObject(val) &&
        "c" in val &&
        "m" in val &&
        "y" in val &&
        "k" in val
      );
    },
    isHEX: function(val) {
      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(val);
    },
    isColor: function(color) {
      return (
        this.isHEX(color) ||
        this.isRGB(color) ||
        this.isRGBA(color) ||
        this.isHSV(color) ||
        this.isHSL(color) ||
        this.isCMYK(color)
      );
    },
    hueShift: function(h, s) {
      for (h += s; 360 <= h; ) h -= 360;
      for (; h < 0; ) h += 360;
      return h;
    },
    getScheme: function(color, name, format, options) {
      var i;
      this.options = $.extend({}, this.options, options);
      var hsv,
        scheme = [],
        that = this;
      if (((hsv = this.toHSV(color)), !1 === this.isHSV(hsv)))
        return console.log("The value is a not supported color format!"), !1;
      function clamp(num, min, max) {
        return Math.max(min, Math.min(num, max));
      }
      function toRange(a, b, c) {
        return a < b ? b : c < a ? c : a;
      }
      var rgb,
        h = hsv.h,
        s = hsv.s,
        v = hsv.v,
        o = this.options;
      switch (name) {
        case "monochromatic":
        case "mono":
          if (1 === o.algorithm)
            ((rgb = this.hsv2rgb(hsv)).r = toRange(
              Math.round(rgb.r + (255 - rgb.r) * o.tint1),
              0,
              255
            )),
              (rgb.g = toRange(
                Math.round(rgb.g + (255 - rgb.g) * o.tint1),
                0,
                255
              )),
              (rgb.b = toRange(
                Math.round(rgb.b + (255 - rgb.b) * o.tint1),
                0,
                255
              )),
              scheme.push(this.rgb2hsv(rgb)),
              ((rgb = this.hsv2rgb(hsv)).r = toRange(
                Math.round(rgb.r + (255 - rgb.r) * o.tint2),
                0,
                255
              )),
              (rgb.g = toRange(
                Math.round(rgb.g + (255 - rgb.g) * o.tint2),
                0,
                255
              )),
              (rgb.b = toRange(
                Math.round(rgb.b + (255 - rgb.b) * o.tint2),
                0,
                255
              )),
              scheme.push(this.rgb2hsv(rgb)),
              scheme.push(hsv),
              ((rgb = this.hsv2rgb(hsv)).r = toRange(
                Math.round(rgb.r * o.shade1),
                0,
                255
              )),
              (rgb.g = toRange(Math.round(rgb.g * o.shade1), 0, 255)),
              (rgb.b = toRange(Math.round(rgb.b * o.shade1), 0, 255)),
              scheme.push(this.rgb2hsv(rgb)),
              ((rgb = this.hsv2rgb(hsv)).r = toRange(
                Math.round(rgb.r * o.shade2),
                0,
                255
              )),
              (rgb.g = toRange(Math.round(rgb.g * o.shade2), 0, 255)),
              (rgb.b = toRange(Math.round(rgb.b * o.shade2), 0, 255)),
              scheme.push(this.rgb2hsv(rgb));
          else if (2 === o.algorithm)
            for (scheme.push(hsv), i = 1; i <= o.distance; i++)
              (v = clamp(v - o.step, 0, 1)),
                (s = clamp(s - o.step, 0, 1)),
                scheme.push({ h: h, s: s, v: v });
          else if (3 === o.algorithm)
            for (scheme.push(hsv), i = 1; i <= o.distance; i++)
              (v = clamp(v - o.step, 0, 1)), scheme.push({ h: h, s: s, v: v });
          else
            (v = clamp(hsv.v + 2 * o.step, 0, 1)),
              scheme.push({ h: h, s: s, v: v }),
              (v = clamp(hsv.v + o.step, 0, 1)),
              scheme.push({ h: h, s: s, v: v }),
              scheme.push(hsv),
              (s = hsv.s),
              (v = hsv.v),
              (v = clamp(hsv.v - o.step, 0, 1)),
              scheme.push({ h: h, s: s, v: v }),
              (v = clamp(hsv.v - 2 * o.step, 0, 1)),
              scheme.push({ h: h, s: s, v: v });
          break;
        case "complementary":
        case "complement":
        case "comp":
          scheme.push(hsv),
            (h = this.hueShift(hsv.h, 180)),
            scheme.push({ h: h, s: s, v: v });
          break;
        case "double-complementary":
        case "double-complement":
        case "double":
          scheme.push(hsv),
            (h = this.hueShift(h, 180)),
            scheme.push({ h: h, s: s, v: v }),
            (h = this.hueShift(h, o.angle)),
            scheme.push({ h: h, s: s, v: v }),
            (h = this.hueShift(h, 180)),
            scheme.push({ h: h, s: s, v: v });
          break;
        case "analogous":
        case "analog":
          (h = this.hueShift(h, o.angle)),
            scheme.push({ h: h, s: s, v: v }),
            scheme.push(hsv),
            (h = this.hueShift(hsv.h, 0 - o.angle)),
            scheme.push({ h: h, s: s, v: v });
          break;
        case "triadic":
        case "triad":
          for (scheme.push(hsv), i = 1; i < 3; i++)
            (h = this.hueShift(h, 120)), scheme.push({ h: h, s: s, v: v });
          break;
        case "tetradic":
        case "tetra":
          scheme.push(hsv),
            (h = this.hueShift(hsv.h, 180)),
            scheme.push({ h: h, s: s, v: v }),
            (h = this.hueShift(hsv.h, -1 * o.angle)),
            scheme.push({ h: h, s: s, v: v }),
            (h = this.hueShift(h, 180)),
            scheme.push({ h: h, s: s, v: v });
          break;
        case "square":
          for (scheme.push(hsv), i = 1; i < 4; i++)
            (h = this.hueShift(h, 90)), scheme.push({ h: h, s: s, v: v });
          break;
        case "split-complementary":
        case "split-complement":
        case "split":
          (h = this.hueShift(h, 180 - o.angle)),
            scheme.push({ h: h, s: s, v: v }),
            scheme.push(hsv),
            (h = this.hueShift(hsv.h, 180 + o.angle)),
            scheme.push({ h: h, s: s, v: v });
          break;
        default:
          console.log("Unknown scheme name");
      }
      return (function(source, format) {
        var result = [],
          o = that.options;
        switch (format) {
          case "hex":
            result = source.map(function(v) {
              return Colors.toHEX(v);
            });
            break;
          case "rgb":
            result = source.map(function(v) {
              return Colors.toRGB(v);
            });
            break;
          case "rgba":
            result = source.map(function(v) {
              return Colors.toRGBA(v, o.alpha);
            });
            break;
          case "hsl":
            result = source.map(function(v) {
              return Colors.toHSL(v);
            });
            break;
          case "cmyk":
            result = source.map(function(v) {
              return Colors.toCMYK(v);
            });
            break;
          default:
            result = source;
        }
        return result;
      })(scheme, format);
    }
  };
  Metro.colors = Colors.init();
  var TileDefaultConfig = {
    size: "medium",
    cover: "",
    coverPosition: "center",
    effect: "",
    effectInterval: 3e3,
    effectDuration: 500,
    target: null,
    canTransform: !0,
    onClick: Metro.noop,
    onTileCreate: Metro.noop
  };
  (Metro.tileSetup = function(options) {
    TileDefaultConfig = $.extend({}, TileDefaultConfig, options);
  }),
    void 0 !== typeof window.metroTileSetup &&
      Metro.tileSetup(window.metroTileSetup);
  var Tile = {
    init: function(options, elem) {
      return (
        (this.options = $.extend({}, TileDefaultConfig, options)),
        (this.elem = elem),
        (this.element = $(elem)),
        (this.effectInterval = !1),
        (this.images = []),
        (this.slides = []),
        (this.currentSlide = -1),
        (this.unload = !1),
        this._setOptionsFromDOM(),
        this._create(),
        this
      );
    },
    _setOptionsFromDOM: function() {
      var element = this.element,
        o = this.options;
      $.each(element.data(), function(key, value) {
        if (key in o)
          try {
            o[key] = JSON.parse(value);
          } catch (e) {
            o[key] = value;
          }
      });
    },
    _create: function() {
      var element = this.element,
        o = this.options;
      this._createTile(),
        this._createEvents(),
        Utils.exec(o.onTileCreate, null, element[0]),
        element.fire("tilecreate");
    },
    _createTile: function() {
      function switchImage(el, img_src) {
        setTimeout(function() {
          el.fadeOut(500, function() {
            el.css("background-image", "url(" + img_src + ")"), el.fadeIn();
          });
        }, Utils.random(0, 1e3));
      }
      var that = this,
        element = this.element,
        o = this.options,
        slides = element.find(".slide"),
        slides2 = element.find(".slide-front, .slide-back");
      element.addClass("tile-" + o.size),
        -1 < o.effect.indexOf("hover-") &&
          (element.addClass("effect-" + o.effect),
          $.each(slides2, function() {
            var slide = $(this);
            void 0 !== slide.data("cover") &&
              that._setCover(
                slide,
                slide.data("cover"),
                slide.data("cover-position")
              );
          })),
        -1 < o.effect.indexOf("animate-") &&
          1 < slides.length &&
          ($.each(slides, function(i) {
            var slide = $(this);
            that.slides.push(this),
              void 0 !== slide.data("cover") &&
                that._setCover(
                  slide,
                  slide.data("cover"),
                  slide.data("cover-position")
                ),
              0 < i &&
                (-1 <
                  ["animate-slide-up", "animate-slide-down"].indexOf(
                    o.effect
                  ) && slide.css("top", "100%"),
                -1 <
                  ["animate-slide-left", "animate-slide-right"].indexOf(
                    o.effect
                  ) && slide.css("left", "100%"),
                -1 < ["animate-fade"].indexOf(o.effect) &&
                  slide.css("opacity", 0));
          }),
          (this.currentSlide = 0),
          this._runEffects()),
        "" !== o.cover && this._setCover(element, o.cover),
        "image-set" === o.effect &&
          (element.addClass("image-set"),
          $.each(element.children("img"), function() {
            var img = $(this),
              src = this.src,
              div = $("<div>").addClass("img");
            img.hasClass("icon") ||
              (that.images.push(this),
              div.css("background-image", "url(" + src + ")"),
              element.prepend(div),
              img.remove());
          }),
          setInterval(function() {
            for (
              var temp = that.images.slice(), i = 0;
              i < element.find(".img").length;
              i++
            ) {
              var rnd_index = Utils.random(0, temp.length - 1);
              switchImage($(element.find(".img").get(i)), temp[rnd_index].src),
                temp.splice(rnd_index, 1);
            }
          }, 3e3));
    },
    _runEffects: function() {
      var that = this,
        o = this.options;
      !1 === this.effectInterval &&
        (this.effectInterval = setInterval(function() {
          var current, next;
          (current = $(that.slides[that.currentSlide])),
            that.currentSlide++,
            that.currentSlide === that.slides.length && (that.currentSlide = 0),
            (next = that.slides[that.currentSlide]),
            "animate-slide-up" === o.effect &&
              Animation.slideUp($(current), $(next), o.effectDuration),
            "animate-slide-down" === o.effect &&
              Animation.slideDown($(current), $(next), o.effectDuration),
            "animate-slide-left" === o.effect &&
              Animation.slideLeft($(current), $(next), o.effectDuration),
            "animate-slide-right" === o.effect &&
              Animation.slideRight($(current), $(next), o.effectDuration),
            "animate-fade" === o.effect &&
              Animation.fade($(current), $(next), o.effectDuration);
        }, o.effectInterval));
    },
    _stopEffects: function() {
      clearInterval(this.effectInterval), (this.effectInterval = !1);
    },
    _setCover: function(to, src, pos) {
      Utils.isValue(pos) || (pos = this.options.coverPosition),
        to.css({
          backgroundImage: "url(" + src + ")",
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat",
          backgroundPosition: pos
        });
    },
    _createEvents: function() {
      var that = this,
        element = this.element,
        o = this.options;
      element.on(Metro.events.start, function(e) {
        var side,
          tile = $(this),
          dim_w = element.width(),
          dim_h = element.height(),
          X = Utils.pageXY(e).x - tile.offset().left,
          Y = Utils.pageXY(e).y - tile.offset().top;
        !1 === Utils.isRightMouse(e) &&
          ((side =
            X < (1 * dim_w) / 3 && (Y < (1 * dim_h) / 2 || (1 * dim_h) / 2 < Y)
              ? "left"
              : (2 * dim_w) / 3 < X &&
                (Y < (1 * dim_h) / 2 || (1 * dim_h) / 2 < Y)
              ? "right"
              : (1 * dim_w) / 3 < X && X < (2 * dim_w) / 3 && dim_h / 2 < Y
              ? "bottom"
              : "top"),
          !0 === o.canTransform && tile.addClass("transform-" + side),
          null !== o.target &&
            setTimeout(function() {
              document.location.href = o.target;
            }, 100),
          Utils.exec(o.onClick, [side], element[0]),
          element.fire("click", { side: side }));
      }),
        element.on([Metro.events.stop, Metro.events.leave].join(" "), function(
          e
        ) {
          $(this)
            .removeClass("transform-left")
            .removeClass("transform-right")
            .removeClass("transform-top")
            .removeClass("transform-bottom");
        }),
        $(window).on(Metro.events.blur, function() {
          that._stopEffects();
        }),
        $(window).on(Metro.events.focus, function() {
          that._runEffects();
        });
    },
    changeAttribute: function(attributeName) {}
  };
  return Metro.plugin("tile", Tile), !0 === METRO_INIT ? Metro.init() : Metro;
});
